// <auto-generated />
using System;
using MetroTicketReservation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MetroTicketReservation.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250516184729_AddPayment")]
    partial class AddPayment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Device", b =>
                {
                    b.Property<int>("DeviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeviceID"));

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StationID")
                        .HasColumnType("integer");

                    b.HasKey("DeviceID");

                    b.HasIndex("StationID");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Line", b =>
                {
                    b.Property<int>("LineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LineID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LineID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Passenger", b =>
                {
                    b.Property<int>("PassengerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PassengerID"));

                    b.Property<string>("CardUID")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PassengerID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GoogleId")
                        .IsUnique();

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderInfo")
                        .HasColumnType("text");

                    b.Property<int>("PassengerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TicketId")
                        .HasColumnType("integer");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("PassengerId");

                    b.HasIndex("TicketId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Station", b =>
                {
                    b.Property<int>("StationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StationID");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.StationFare", b =>
                {
                    b.Property<int>("StationFareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationFareID"));

                    b.Property<int>("EndStationID")
                        .HasColumnType("integer");

                    b.Property<int>("Fare")
                        .HasColumnType("integer");

                    b.Property<int>("StartStationID")
                        .HasColumnType("integer");

                    b.Property<int>("TicketTypeID")
                        .HasColumnType("integer");

                    b.HasKey("StationFareID");

                    b.HasIndex("EndStationID");

                    b.HasIndex("StartStationID");

                    b.HasIndex("TicketTypeID");

                    b.ToTable("StationFares");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.StationLine", b =>
                {
                    b.Property<int>("StationID")
                        .HasColumnType("integer");

                    b.Property<int>("LineID")
                        .HasColumnType("integer");

                    b.Property<int>("StationOrder")
                        .HasColumnType("integer");

                    b.HasKey("StationID", "LineID");

                    b.HasIndex("LineID");

                    b.HasIndex("StationID", "LineID");

                    b.ToTable("StationLines");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketID"));

                    b.Property<int?>("EndStationID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("PassengerID")
                        .HasColumnType("integer");

                    b.Property<string>("PurchaseChannel")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("StartStationID")
                        .HasColumnType("integer");

                    b.Property<int>("TicketTypeID")
                        .HasColumnType("integer");

                    b.HasKey("TicketID");

                    b.HasIndex("EndStationID");

                    b.HasIndex("PassengerID");

                    b.HasIndex("StartStationID");

                    b.HasIndex("TicketTypeID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.TicketType", b =>
                {
                    b.Property<int>("TicketTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketTypeID"));

                    b.Property<bool>("IsStudentOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTimeBased")
                        .HasColumnType("boolean");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketPrice")
                        .HasColumnType("integer");

                    b.Property<int>("ValidityDays")
                        .HasColumnType("integer");

                    b.HasKey("TicketTypeID");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.TicketUsage", b =>
                {
                    b.Property<int>("TicketUsageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketUsageID"));

                    b.Property<int?>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsEntry")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ScanTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StationID")
                        .HasColumnType("integer");

                    b.Property<int>("TicketID")
                        .HasColumnType("integer");

                    b.HasKey("TicketUsageID");

                    b.HasIndex("DeviceID");

                    b.HasIndex("StationID");

                    b.HasIndex("TicketID");

                    b.ToTable("TicketUsages");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Device", b =>
                {
                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Payment", b =>
                {
                    b.HasOne("MetroTicketReservation.Domain.Entities.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MetroTicketReservation.Domain.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Passenger");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.StationFare", b =>
                {
                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "EndStation")
                        .WithMany()
                        .HasForeignKey("EndStationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "StartStation")
                        .WithMany()
                        .HasForeignKey("StartStationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketReservation.Domain.Entities.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndStation");

                    b.Navigation("StartStation");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.StationLine", b =>
                {
                    b.HasOne("MetroTicketReservation.Domain.Entities.Line", "Line")
                        .WithMany("StationLines")
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "Station")
                        .WithMany("StationLines")
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "EndStation")
                        .WithMany()
                        .HasForeignKey("EndStationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MetroTicketReservation.Domain.Entities.Passenger", "Passenger")
                        .WithMany("Tickets")
                        .HasForeignKey("PassengerID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "StartStation")
                        .WithMany()
                        .HasForeignKey("StartStationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MetroTicketReservation.Domain.Entities.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndStation");

                    b.Navigation("Passenger");

                    b.Navigation("StartStation");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.TicketUsage", b =>
                {
                    b.HasOne("MetroTicketReservation.Domain.Entities.Device", "Device")
                        .WithMany("TicketUsages")
                        .HasForeignKey("DeviceID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketReservation.Domain.Entities.Ticket", "Ticket")
                        .WithMany("Usages")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Station");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Device", b =>
                {
                    b.Navigation("TicketUsages");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Line", b =>
                {
                    b.Navigation("StationLines");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Passenger", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Station", b =>
                {
                    b.Navigation("StationLines");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Usages");
                });
#pragma warning restore 612, 618
        }
    }
}
