// <auto-generated />
using MetroTicketReservation.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MetroTicketReservation.Infrastructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250427105827_TicketTypeMigration")]
    partial class TicketTypeMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Line", b =>
                {
                    b.Property<int>("LineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LineID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LineID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Station", b =>
                {
                    b.Property<int>("StationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("StationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StationID");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.StationFare", b =>
                {
                    b.Property<int>("StationFareID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationFareID"));

                    b.Property<int>("EndStationID")
                        .HasColumnType("integer");

                    b.Property<int>("Fare")
                        .HasColumnType("integer");

                    b.Property<int>("StartStationID")
                        .HasColumnType("integer");

                    b.Property<int>("TicketTypeID")
                        .HasColumnType("integer");

                    b.HasKey("StationFareID");

                    b.HasIndex("EndStationID");

                    b.HasIndex("StartStationID");

                    b.HasIndex("TicketTypeID");

                    b.ToTable("StationFares");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.StationLine", b =>
                {
                    b.Property<int>("StationID")
                        .HasColumnType("integer");

                    b.Property<int>("LineID")
                        .HasColumnType("integer");

                    b.Property<int>("StationOrder")
                        .HasColumnType("integer");

                    b.HasKey("StationID", "LineID");

                    b.HasIndex("LineID");

                    b.HasIndex("StationID", "LineID");

                    b.ToTable("StationLines");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.TicketType", b =>
                {
                    b.Property<int>("TicketTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TicketTypeID"));

                    b.Property<bool>("IsStudentOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTimeBased")
                        .HasColumnType("boolean");

                    b.Property<string>("TicketName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TicketPrice")
                        .HasColumnType("integer");

                    b.Property<int>("ValidityDays")
                        .HasColumnType("integer");

                    b.HasKey("TicketTypeID");

                    b.ToTable("TicketTypes");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.StationFare", b =>
                {
                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "EndStation")
                        .WithMany()
                        .HasForeignKey("EndStationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "StartStation")
                        .WithMany()
                        .HasForeignKey("StartStationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MetroTicketReservation.Domain.Entities.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EndStation");

                    b.Navigation("StartStation");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.StationLine", b =>
                {
                    b.HasOne("MetroTicketReservation.Domain.Entities.Line", "Line")
                        .WithMany("StationLines")
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MetroTicketReservation.Domain.Entities.Station", "Station")
                        .WithMany("StationLines")
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Line", b =>
                {
                    b.Navigation("StationLines");
                });

            modelBuilder.Entity("MetroTicketReservation.Domain.Entities.Station", b =>
                {
                    b.Navigation("StationLines");
                });
#pragma warning restore 612, 618
        }
    }
}
